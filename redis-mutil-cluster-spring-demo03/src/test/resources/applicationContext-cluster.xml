<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	default-autowire="byName">
	<!--以下为cluster 多redis配置 -->
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:application.properties" />

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="2048" />
		<property name="maxIdle" value="200" />
		<property name="numTestsPerEvictionRun" value="1024" />

		<property name="minEvictableIdleTimeMillis" value="-1" />
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<property name="maxWaitMillis" value="1500" />
		<property name="testOnReturn" value="false" />
		<property name="jmxEnabled" value="true" />
		<property name="blockWhenExhausted" value="false" />
		<!-- 三个配置配合设置，可以起到以下三点作用： (1)、保证每次获取的连接都是可用的 (2)、定时清理失效连接，补充新连接，提高效率 -->
		<property name="testOnBorrow" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
	</bean>

	 <!-- 采用redis-cluster的redis -->  
    <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">  
        <property name="maxRedirects" value="3" />  
        <property name="clusterNodes">  
            <set>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="127.0.0.1" />  
                    <constructor-arg name="port" value="7000" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="127.0.0.1" />  
                    <constructor-arg name="port" value="7001" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode ">  
                    <constructor-arg name="host" value="127.0.0.1" />  
                    <constructor-arg name="port" value="7002" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="127.0.0.1" />  
                    <constructor-arg name="port" value="7003" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="127.0.0.1" />  
                    <constructor-arg name="port" value="7004" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode ">  
                    <constructor-arg name="host" value="127.0.0.1" />  
                    <constructor-arg name="port" value="7005" />  
                </bean>  
            </set>  
        </property>  
    </bean>  
    <bean id="clusterJedisConnectionFactory"  
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >  
       <!--  p:pool-config-ref="jedisPoolConfig" -->
        <constructor-arg name="clusterConfig" ref="redisClusterConfiguration" />  
        <constructor-arg name="poolConfig" ref="jedisPoolConfig" />  
    </bean>  
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="clusterJedisConnectionFactory" />  
        <property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
       <!--  <property name="keySerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>  
        <property name="valueSerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>  
        <property name="hashKeySerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>  
        <property name="hashValueSerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>   -->
    </bean> 
</beans>